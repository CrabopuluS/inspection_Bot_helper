
import asyncio, logging, math, urllib.parse
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_TOKEN, ADMINS
from db import init_db, search, get_question_by_id, get_all_tags, get_questions_by_tag, rebuild_fts
import aiosqlite

logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

MAIN_KB = ReplyKeyboardMarkup(
  keyboard=[[KeyboardButton(text="üîé –ü–æ–∏—Å–∫"), KeyboardButton(text="üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]],
  resize_keyboard=True
)

HELP_TEXT = (
  "<b>–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –±–æ—Ç</b>\n\n"
  "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
  "/ask &lt;–≤–æ–ø—Ä–æ—Å&gt; ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
  "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
  "–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä–∏—Å–ª–∞—Ç—å CSV (document) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã."
)

def build_results_kb(rows):
  kb = InlineKeyboardBuilder()
  for r in rows:
    kb.button(text=r["question"][:64], callback_data=f"show:{r['id']}")
  kb.adjust(1)
  return kb.as_markup()

def build_tags_kb(tags, page=0, per_page=8):
  kb = InlineKeyboardBuilder()
  start = page * per_page
  for t in tags[start:start+per_page]:
    enc = urllib.parse.quote(t, safe="")
    kb.button(text=f"#{t}", callback_data=f"tag:{enc}:0")
  if len(tags) > per_page:
    if page > 0:
      kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tags:page:{page-1}")
    if (page+1)*per_page < len(tags):
      kb.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"tags:page:{page+1}")
  kb.adjust(2)
  return kb.as_markup()

def build_tag_list_kb(tag, total, page, per_page, rows):
  kb = InlineKeyboardBuilder()
  for r in rows:
    kb.button(text=r["question"][:64], callback_data=f"show:{r['id']}")
  pages = math.ceil(total / per_page) if per_page else 1
  if page > 0:
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tag:{urllib.parse.quote(tag, safe='')}:{page-1}")
  if page+1 < pages:
    kb.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"tag:{urllib.parse.quote(tag, safe='')}:{page+1}")
  kb.adjust(1)
  return kb.as_markup()

async def answer_by_query(qtext: str, message: Message):
  q = (qtext or "").strip()
  if len(q) < 3:
    return await message.answer("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
  rows = await search(q, limit=5)
  if not rows:
    return await message.answer("–ù–µ –Ω–∞—à—ë–ª –Ω–∏—á–µ–≥–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=MAIN_KB)
  await message.answer("<b>–ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã:</b>", reply_markup=build_results_kb(rows))

@dp.message(Command("start"))
async def cmd_start(message: Message):
  await message.answer("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ.", reply_markup=MAIN_KB)

@dp.message(Command("help"))
async def cmd_help(message: Message):
  await message.answer(HELP_TEXT, reply_markup=MAIN_KB)

@dp.message(Command("ask"))
async def cmd_ask(message: Message):
  q = message.text.partition(" ")[2]
  await answer_by_query(q, message)

@dp.message(F.document)
async def handle_csv_upload(message: Message):
  if message.from_user.id not in ADMINS:
    return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
  if not message.document.file_name.lower().endswith(".csv"):
    return await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ question,answer,tags.")
  path = f"/tmp/{message.document.file_name}"
  file = await bot.get_file(message.document.file_id)
  await bot.download_file(file.file_path, destination=path)

  import csv
  cnt = 0
  async with aiosqlite.connect("faq.db") as db, open(path, "r", encoding="utf-8") as f:
    reader = csv.DictReader(f)
    await db.execute("DELETE FROM faq;")
    for row in reader:
      await db.execute(
        "INSERT INTO faq(question, answer, tags) VALUES(?,?,?)",
        (row.get("question","").strip(), row.get("answer","").strip(), row.get("tags","").strip())
      )
      cnt += 1
    await db.commit()
  await rebuild_fts()
  await message.answer(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {cnt} –∑–∞–ø–∏—Å–µ–π. –ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")

@dp.callback_query(F.data.startswith("show:"))
async def cb_show_answer(cb: CallbackQuery):
  qid = int(cb.data.split(":")[1])
  row = await get_question_by_id(qid)
  if not row:
    return await cb.message.edit_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
  text = f"<b>{row['question']}</b>\\n\\n{row['answer']}"
  await cb.message.edit_text(text)

@dp.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
@dp.message(F.text.regexp(r"(?i)^–∫–∞—Ç–µ–≥–æ—Ä"))
async def show_categories(message: Message):
  tags = await get_all_tags(limit=200)
  if not tags:
    return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å —Ç—ç–≥–∞–º–∏.", reply_markup=MAIN_KB)
  await message.answer("<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>", reply_markup=build_tags_kb(tags, page=0))

@dp.callback_query(F.data.startswith("tags:page:"))
async def cb_tags_page(cb: CallbackQuery):
  page = int(cb.data.split(":")[2])
  tags = await get_all_tags(limit=200)
  await cb.message.edit_text("<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>", reply_markup=build_tags_kb(tags, page=page))

@dp.callback_query(F.data.startswith("tag:"))
async def cb_tag_list(cb: CallbackQuery):
  _, enc_tag, page_str = cb.data.split(":")
  tag = urllib.parse.unquote(enc_tag)
  page = int(page_str)
  per_page = 10
  total, rows = await get_questions_by_tag(tag, offset=page*per_page, limit=per_page)
  if total == 0:
    return await cb.message.edit_text(f"–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{tag}¬ª.")
  header = f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> #{tag}\\n–í–æ–ø—Ä–æ—Å—ã ({page*per_page+1}‚Äì{min((page+1)*per_page,total)} –∏–∑ {total}):"
  await cb.message.edit_text(header, reply_markup=build_tag_list_kb(tag, total, page, per_page, rows))

@dp.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def prompt_search(message: Message):
  await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º. –Ø –ø–æ–¥–±–µ—Ä—É –ø–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.")

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help_btn(message: Message):
  await message.answer(HELP_TEXT, reply_markup=MAIN_KB)

@dp.message()
async def free_text(message: Message):
  await answer_by_query(message.text, message)

async def main():
  await init_db()
  await dp.start_polling(bot)

if __name__ == "__main__":
  asyncio.run(main())
